#version 430 core
layout(triangles, equal_spacing, ccw) in;

in vec3 tcPosition[];
in vec2 tcTexCoord[];
in vec3 tcNormal[];

out vec3 teFragPos;	// vertex position in world space
out vec3 tePosition; // vertex position in model space
out vec2 teTexCoord;
out vec3 teNormal;

uniform mat4 modelMat;
uniform mat4 viewMat;
uniform mat4 projMat;

uniform sampler2D dispMap;
uniform float magnitude;

void main()
{
	vec3 p0 = gl_TessCoord.x * tcPosition[0];
	vec3 p1 = gl_TessCoord.y * tcPosition[1];
	vec3 p2 = gl_TessCoord.z * tcPosition[2];
	vec3 pos = p0 + p1 + p2;
	
	vec3 n0 = gl_TessCoord.x * tcNormal[0];
	vec3 n1 = gl_TessCoord.y * tcNormal[1];
	vec3 n2 = gl_TessCoord.z * tcNormal[2];
	vec3 normal = n0 + n1 + n2;
	
	vec2 tc0 = gl_TessCoord.x * tcTexCoord[0];
	vec2 tc1 = gl_TessCoord.y * tcTexCoord[1];
	vec2 tc2 = gl_TessCoord.z * tcTexCoord[2];
	teTexCoord = tc0 + tc1 + tc2;

	float height = texture(dispMap, teTexCoord).x;
	pos += normal * height * magnitude;

	teFragPos = (modelMat * vec4(pos, 1)).xyz;
	gl_Position = projMat * viewMat * vec4(teFragPos, 1);

	tePosition = (viewMat * vec4(teFragPos, 1)).xyz;
	teNormal = (viewMat * modelMat * vec4(normal, 0)).xyz;
}